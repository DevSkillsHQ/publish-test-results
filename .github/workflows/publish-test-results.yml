name: Publish test results to Alva
on:
  workflow_call:

jobs:
  tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        
        # Environment setup
      - name: Install Java 17
        uses: actions/setup-java@v2
        with:
         distribution: 'adopt'
         java-version: '17'  
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2
      
      - name: Update host
        run: "sed 's/host.docker.internal/localhost/g' cypress.config.js > temp.js && mv temp.js cypress.config.js"

      # Setting up the required test reporter for test results so we can parse them
      - name: Ensure mochawesome
        run: 'jq -r ".[\"devDependencies\"] |= (.mochawesome = \"^7.1.3\")" package.json > package.json.tmp && mv package.json.tmp package.json'
      - name: Install deps
        run: npm install
        
      - name: Fetch apiUrl
        run: |
          apiUrl=$(node -p "require('./cypress.config.js').env.apiUrl")
          apiUrl=$apiUrl/ping
          echo "apiUrl=$apiUrl" >> $GITHUB_ENV
        shell: bash
        
      - name: Update test reporter
        run: |
          sed 's#module.exports = defineConfig({#module.exports = defineConfig({\n  reporter: '\"'mochawesome'\"',\n  reporterOptions: {\n    reportDir: '\"'cypress/reports/mocha'\"',\n    quiet: true,\n    overwrite: false,\n    html: false,\n    json: true\n  },#g' cypress.config.js > temp.js
          mv temp.js cypress.config.js
      
      # Running tests for all challenges except Backend.
      - name: Run tests without waiting on API
        if: env.apiUrl == ''
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run start
          
      # Running tests for Backend challenges. Waiting on API is required.    
      - name: Run tests with waiting on API
        if: env.apiUrl != ''
        uses: cypress-io/github-action@v5
        with:
          build: npm run build
          start: npm run start
          wait-on: ${{ env.apiUrl }}
      
      # Preparing test results and sending them to Alva
      - name: Fetch test results
        if: always()
        run: |
          echo "testResults=$(jq -c '[.results[].suites[].tests[] | {test: .title, result: .state}]' cypress/reports/mocha/mochawesome.json)" >> $GITHUB_ENV
      - name: Set repo env var
        if: always()
        run: echo "github_repo=$GITHUB_REPOSITORY" >> $GITHUB_ENV
      - name: Check if current repo is a template
        if: always()
        run: |
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }})
          if echo "$response" | jq -e '.is_template == true' > /dev/null; then
            echo "isTemplate=true" >> $GITHUB_ENV
          else
            echo "isTemplate=false" >> $GITHUB_ENV
          fi       
      - name: Publish test results with retries if candidate repo, i.e. not a template repo
        if: always() && env.isTemplate == 'false'
        run: |
          retry=0
          max_retries=3
          sleep_time=5  # seconds
          status=1  # any non-zero value
          while [[ "$status" -ne 0 && "$retry" -lt "$max_retries" ]]; do
            echo "Attempt: $((retry+1))"
            curl -s -o /dev/null -w "%{http_code}" \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{"assignmentRepository": "${{ env.github_repo }}","results": "[${{ env.testResults }}]"}' \
              ${{ vars.AUTO_SCORE_WEBHOOK_URL }}
            status=$?
            if [[ "$status" -ne 0 ]]; then
              echo "Attempt $((retry+1)) failed. Retrying in $sleep_time seconds..."
              sleep "$sleep_time"
            fi
            retry=$((retry+1))
          done
          if [[ "$status" -ne 0 ]]; then
            echo "All attempts failed after $max_retries retries."
            exit 1
          fi

